<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.0">
    <TriggerPackage>
        <TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
            <name>MIP</name>
            <script></script>
            <triggerType>0</triggerType>
            <conditonLineDelta>0</conditonLineDelta>
            <mStayOpen>0</mStayOpen>
            <mCommand></mCommand>
            <packageName></packageName>
            <mFgColor>#ff0000</mFgColor>
            <mBgColor>#ffff00</mBgColor>
            <mSoundFile></mSoundFile>
            <colorTriggerFgColor>#000000</colorTriggerFgColor>
            <colorTriggerBgColor>#000000</colorTriggerBgColor>
            <regexCodeList/>
            <regexCodePropertyList/>
            <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="yes" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                <name>MIP Capture</name>
                <script>--deleteLine()
--echo(&quot;\n#K%&quot;..matches[2]..matches[3]..matches[4]..string.sub(matches[5],1,tonumber(matches[3])-3)..&quot;\n&quot;)
local iter=0
local mLen
local mCode
for i,v in pairs(matches) do
	if iter==2 then
		mLen=tonumber(v)
	elseif iter==3 then
		mCode=v
		local mLine = getCurrentLine()
		local mStart = string.find(mLine,&quot;#K%%&quot;)
		local entry = string.sub(mLine,mStart,mStart+mLen+10)
		mip:processMIP(entry,mCode)
		selectString(entry,1)
		replace(&quot;&quot;)
	end
	if iter==3 then
		iter=0
	else
		iter=iter+1
	end
end
if getCurrentLine() == &quot;&quot; then
	deleteLine()
end
doPrompt()</script>
                <triggerType>0</triggerType>
                <conditonLineDelta>0</conditonLineDelta>
                <mStayOpen>0</mStayOpen>
                <mCommand></mCommand>
                <packageName></packageName>
                <mFgColor>#ff0000</mFgColor>
                <mBgColor>#ffff00</mBgColor>
                <mSoundFile></mSoundFile>
                <colorTriggerFgColor>#000000</colorTriggerFgColor>
                <colorTriggerBgColor>#000000</colorTriggerBgColor>
                <regexCodeList>
                    <string>#K%([0-9]{5,5})([0-9]{3,3})([A-Z]{3,3})</string>
                </regexCodeList>
                <regexCodePropertyList>
                    <integer>1</integer>
                </regexCodePropertyList>
            </Trigger>
        </TriggerGroup>
    </TriggerPackage>
    <TimerPackage/>
    <AliasPackage>
        <AliasGroup isActive="yes" isFolder="yes">
            <name>MIP</name>
            <script></script>
            <command></command>
            <packageName></packageName>
            <regex></regex>
            <Alias isActive="yes" isFolder="no">
                <name>start mip</name>
                <script>require(&quot;math&quot;)
local code = math.random(10000,30000)
send(&quot;3klient &quot;..code..&quot;~mudlet&quot;)</script>
                <command></command>
                <packageName></packageName>
                <regex>^startMIP$</regex>
            </Alias>
        </AliasGroup>
    </AliasPackage>
    <ActionPackage/>
    <ScriptPackage>
        <ScriptGroup isActive="yes" isFolder="yes">
            <name>MIP</name>
            <packageName></packageName>
            <script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
            <eventHandlerList/>
            <Script isActive="yes" isFolder="no">
                <name>MIP</name>
                <packageName></packageName>
                <script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
--local a = &quot;#K%10401051BADUnder the eastern gates of Westersea (n,s,w,out)#K%10401051BADUnder the eastern gates of Westersea (n,s,w,out)#K%10401051BADUnder the eastern gates of Westersea (n,s,w,out)#K%10401051BADUnder the eastern gates of Westersea (n,s,w,out)&quot;
if not mip then
	mip = {}
end
function mip:captureMIP(a)
	if (a:find(&quot;#K%%%d%d%d%d%d%d%d%d&quot;)) then
		local pos = a:find(&quot;#K%%&quot;)
		a = string.sub(a,pos+3)
		pos = a:find(&quot;%d%d%d%d%d&quot;)
		local secCode = string.sub(a,pos,pos+4)
		a = string.sub(a,pos+5)
		pos = a:find(&quot;%d%d%d&quot;)
		local lineLength = tonumber(string.sub(a,pos,pos+2))
		a = string.sub(a,pos+3)
		pos = a:find(&quot;%a%a%a&quot;)
		local mipCode = string.sub(a,pos,pos+2)
		local mipLine = string.sub(a,pos+3,lineLength)
		a = string.sub(a,lineLength+1)
		mip:processMIP(mipCode,mipLine)
		return a
	else
		return nil
	end
end

function mip:processMIP(entry, code)
	if (code == &quot;FFF&quot;) then
		mip:processHpBar(entry)
	elseif (code == &quot;CAA&quot;) then
		mip:chatReceived(entry)
	elseif (code == &quot;BAB&quot;) then
		mip:tellReceived(entry)
	else
	end
end

function mip:tellReceived(entry)
	entry = string.split(entry,&quot;~&quot;)
	if (string.find(entry[1],&quot;BABx&quot;) == nil) then
		mip.chatwindow:cecho(&quot;&lt;cyan&gt;&quot;..entry[2]..&quot;&lt;reset&gt;:&lt;white&gt;&quot;..entry[3]..&quot;&lt;reset&gt;\n&quot;)
	else
		mip.chatwindow:cecho(&quot;&lt;cyan&gt;To &quot;..entry[2]..&quot;&lt;reset&gt;:&lt;white&gt;&quot;..entry[3]..&quot;&lt;reset&gt;\n&quot;)
	end
end

function mip:chatReceived(entry)
	entry = string.split(entry,&quot;~&quot;)
	mip.chatwindow:echo(entry[4]..&quot;\n&quot;)
end

function mip:processHpBar(entry)
	local code, value
	entry = string.sub(entry,15,-1)
	for i,v in pairs(string.split(entry,&quot;~&quot;)) do
		if i%2 == 0 then
			if (code == &quot;A&quot;) then
				mip.hpcur=tonumber(v)
			elseif (code == &quot;B&quot;) then
				mip.hpmax=tonumber(v)
			elseif (code == &quot;C&quot;) then
				mip.spcur = tonumber(v)
			elseif (code == &quot;D&quot;) then
				mip.spmax = tonumber(v)
			elseif (code == &quot;E&quot;) then
				mip.gp1 = tonumber(v)
			elseif (code == &quot;F&quot;) then
				mip.gp1max = tonumber(v)
			elseif (code == &quot;G&quot;) then
				mip.gp2 = tonumber(v)
			elseif (code == &quot;H&quot;) then
				mip.gp2max = tonumber(v)
			elseif (code == &quot;I&quot;) then
				mip.gline1 = v
			elseif (code == &quot;J&quot;) then
				mip.gline2 = v
			elseif (code == &quot;K&quot;) then
				mip.enemy = v
			elseif (code == &quot;L&quot;) then
				mip.enemyhealth = tonumber(v)
			else
				echo(code..&quot;,&quot;..v..&quot;\n&quot;)
			end
--G = reset
		else
			code=v
		end
	end
	mip:updateHpbar()
end</script>
                <eventHandlerList/>
            </Script>
            <Script isActive="yes" isFolder="no">
                <name>Gauges</name>
                <packageName></packageName>
                <script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
local w,h = getMainWindowSize()
createGauge(&quot;hp&quot;, 200, 25, 0, h-25*6-5, nil, &quot;green&quot;)
createGauge(&quot;sp&quot;, 200, 25, 0, h-25*5-5, nil, &quot;blue&quot;)
createGauge(&quot;gp1&quot;, 200, 25, 0, h-25*4-5, nil, &quot;green&quot;)
createGauge(&quot;gp2&quot;, 200, 25, 0, h-25*3-5, nil, &quot;purple&quot;)
createGauge(&quot;enemy&quot;, 200, 25, 0, h-25*2-5, nil, &quot;red&quot;)
mip.glineinfo = Geyser.MiniConsole:new({
      name=&quot;gline1con&quot;,
		x=0,
		y=h-25,
		width=w,
		height=25,
    })
mip.glineinfo:setColor(&quot;black&quot;)
mip.colorMap = {r=&quot;red&quot;, y=&quot;yellow&quot;, g=&quot;green&quot;, c=&quot;cyan&quot;, v=&quot;violet&quot;}

function replaceColor(color, value)
	if mip.colorMap[color] then
		color = mip.colorMap[color]
	else
		return color..&quot;-&quot;..value
	end
	--	return color..&quot;-&quot;..value
	return &quot;&lt;&quot;..color..&quot;&gt;&quot;..value..&quot;&lt;reset&gt;&quot;
end

function mip:doColor(gline)
--	display(string.gsub(gline,&quot;&lt;(.)([^&gt;]+)&gt;&quot;, replaceColor))
	return string.gsub(gline,&quot;&lt;(.)([^&gt;]+)&gt;&quot;, replaceColor)
end

function mip:updateHpbar()
	if (mip.hpmax and mip.hpcur) then
		if (mip.hpcur &gt; mip.hpmax) then
			setGauge(&quot;hp&quot;, mip.hpcur%mip.hpmax, mip.hpmax,&quot;&lt;center&gt;&quot;..tostring(mip.hpcur)..&quot;&lt;/center&gt;&quot;)
		else
			setGauge(&quot;hp&quot;, mip.hpcur, mip.hpmax,&quot;&lt;center&gt;&quot;..tostring(mip.hpcur)..&quot;&lt;/center&gt;&quot;)
		end
	end
	if (mip.spcur and mip.spmax) then
		if (mip.spcur &gt; mip.spmax) then
			setGauge(&quot;sp&quot;, mip.spcur%mip.spmax, mip.spmax, &quot;&lt;center&gt;&quot;..tostring(mip.spcur)..&quot;&lt;/center&gt;&quot;)
		else
			setGauge(&quot;sp&quot;, mip.spcur, mip.spmax,&quot;&lt;center&gt;&quot;..tostring(mip.spcur)..&quot;&lt;/center&gt;&quot;)
		end
	end
	if (mip.gp1) then
		if mip.gp1max then
			setGauge(&quot;gp1&quot;, mip.gp1, mip.gp1max,&quot;&lt;center&gt;&quot;..tostring(mip.gp1)..&quot;&lt;/center&gt;&quot;)
		else
			setGauge(&quot;gp1&quot;, mip.gp1, 100,&quot;&lt;center&gt;&quot;..tostring(mip.gp1)..&quot;&lt;/center&gt;&quot;)
		end
	end
	if (mip.gp2) then
		if mip.gp2max then
			setGauge(&quot;gp2&quot;, mip.gp2, mip.gp2max,&quot;&lt;center&gt;&quot;..tostring(mip.gp2)..&quot;&lt;/center&gt;&quot;)
		else
			setGauge(&quot;gp2&quot;, mip.gp2, 100,&quot;&lt;center&gt;&quot;..tostring(mip.gp2)..&quot;&lt;/center&gt;&quot;)
		end
	end
	if (mip.gline1 or mip.glone2) then	
		clearWindow(&quot;gline1con&quot;)
		if (mip.gline1) then
			local gstr = mip:doColor(mip.gline1)
			mip.glineinfo:cecho(gstr..&quot; | &quot;)--string.sub(gstr,1,string.len(gstr)))
		end
		if (mip.gline2) then	
			local gstr = mip:doColor(mip.gline2)
			mip.glineinfo:cecho(gstr)--string.sub(gstr,1,string.len(gstr)))
		end
	end
	if (mip.enemy and mip.enemyhealth) then
		if (mip.enemyhealth &gt; 100) then
			setGauge(&quot;enemy&quot;, mip.enemyhealth%100, 100, &quot;&lt;center&gt;&quot;..mip.enemy..&quot;&lt;/center&gt;&quot;)
		else
			setGauge(&quot;enemy&quot;, mip.enemyhealth, 100, &quot;&lt;center&gt;&quot;..mip.enemy..&quot;&lt;/center&gt;&quot;)
		end
	end
end</script>
                <eventHandlerList/>
            </Script>
            <Script isActive="yes" isFolder="no">
                <name>Chat Monitor</name>
                <packageName></packageName>
                <script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
local w,h = getMainWindowSize()
mip.chatwindow = Geyser.MiniConsole:new({
      name=&quot;mipchatwindow&quot;,
		x=0,
		y=h-25*20,
		width=200,
		height=200,
    })
setWindowWrap(&quot;mipchatwindow&quot;, 25)</script>
                <eventHandlerList/>
            </Script>
            <Script isActive="no" isFolder="no">
                <name>Prompt Stuff</name>
                <packageName></packageName>
                <script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
function doPrompt()
end</script>
                <eventHandlerList/>
            </Script>
        </ScriptGroup>
    </ScriptPackage>
    <KeyPackage/>
    <HelpPackage>
        <helpURL></helpURL>
    </HelpPackage>
</MudletPackage>
